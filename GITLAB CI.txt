Below is the GITLAB CI provisioning for the web app â€“ Project-webapp
Action Items,
1. Provision: Create the Postgres database.
2. Deploy: Deploy the web application to Minikube.
3. Health-check: Verify if the application is running correctly using the health endpoint.
4. Roll back in case of failure
--------------------------------------------script starts here-------------------------------------------------------
stages:
  - provision
  - deploy
  - health-check
  - Roll back

variables:
  DB_HOST: "localhost"
  DB_PORT: 5432
  DB_NAME: "Project-webapp_db"
  

before_script:
  - echo "Starting CI/CD pipeline"

provision_db:
  stage: provision
  image: hashicorp/terraform:latest
  script:
    - terraform init
    - terraform plan
    - terraform apply -auto-approve
    - export DB_PASSWORD=$(terraform output -raw db_password)
    - export DB_USER=$(terraform output -raw db_username)
    - kubectl create secret generic db-credentials \
        --from-literal=password=$DB_PASSWORD \
        --from-literal=username=$DB_USER
  secrets:
    DATABASE_PASSWORD: $DB_PASSWORD

deploy_app:
  stage: deploy
  image: kubernetes/kubectl:latest
  script:
    - kubectl apply -f kubernetes.yml
    - kubectl rollout status deployment/project-webapp

health_check:
  stage: health-check
  image: curlimages/curl:latest
  script:
    - curl --fail http://localhost:8080/health
    - curl --fail http://localhost:8080/db-health
	
# Rollback if something fails
rollback:
  stage: rollback
  image: hashicorp/terraform:latest
  script:
    - echo "Rolling back deployment and provisioning..."
    # Destroy Terraform-managed resources
    - terraform destroy -auto-approve
    # Delete Kubernetes resources
    - kubectl delete -f deployment.yaml || true
    - kubectl delete secret db-credentials || true
  when: on_failure

--------------------------------------------script ends here-------------------------------------------------------
